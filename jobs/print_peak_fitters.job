#!/home/jparkin/anaconda3/bin/python

#Submit this script with: sbatch thefilename

#SBATCH --time=1:00:00   # walltime
#SBATCH --ntasks=1   # number of processor cores (i.e. tasks)
#SBATCH --mem-per-cpu=2G   # memory per CPU core
#SBATCH -J "write_tiff_stacks_to_scratch"   # job name
#SBATCH --mail-user=jparkin@caltech.edu   # email address
#SBATCH --mail-type=END
#SBATCH --array=0-36

# LOAD MODULES, INSERT CODE, AND RUN YOUR PROGRAMS HERE
# source ~/.bashrc
import os
import sys
import traceback
import importlib
import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

os.chdir('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis')
pad_ind = os.getenv("SLURM_ARRAY_TASK_ID")
if pad_ind is None:
  pad_ind = 0
else:
  pad_ind = np.int(pad_ind)

spec = importlib.util.spec_from_file_location("module.name", "/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/mma.py")
mma = importlib.util.module_from_spec(spec)
spec.loader.exec_module(mma)

if True:
  with open('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/txt_files/unique_good_dirs_nodatadirs.txt', 'r') as f:
    lines = f.read().splitlines()
else:
  with open('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/txt_files/bad_files.txt', 'r') as f:
    lines = f.read().splitlines()

file_ind = 63
fn = os.path.abspath(lines[int(file_ind)])
acq = mma.Acquisition(fn)#, overwrite_time_df=True, overwrite_files_df=True, overwrite_cor_pos_df=True)
out_dir = os.path.join(acq.super_dir,"csvs")
if not os.path.isdir(out_dir):
  os.mkdir(out_dir)
print(acq.super_dir)

def plot_fits(peak_df, fit_df):
    level_colors = dict(zip([0,1,3,5],['k','purple','blue','green']))
    chan_dict = dict(zip([2,3,5],[0,1,2]))
    keys = [(chan, level) for chan in [2.0,3.0,5.0] for level in [0,1,3,5]]
    peak_gb_chan_level = peak_df.groupby(['channel','level'])
    fit_gb_chan_level = fit_df.groupby(['channel','level'])
    if len(peak_df) < 5:
        print('skip {} {}'.format(pad_ind, diff))
        return None
    fig, axs = plt.subplots(1,3,figsize=(13,5))
    for key in keys:#peak_gb_chan_level.groups.keys():
        if not key in peak_gb_chan_level.groups:
            continue
        sub_fit_df = fit_gb_chan_level.get_group(key).reset_index()
        sub_peak_df = peak_gb_chan_level.get_group(key).sort_values(by='time')
        chan, level = key
        fithelper = mma.FitHelper(sub_peak_df.time, sub_peak_df.dist_binned, 1e4)
        t0,c0,c1,c2 = sub_fit_df.loc[0,'t0':'c2'].values
        success = sub_fit_df.loc[0,'success']
        p = np.array([t0,c0,c1,c2])
        c = level_colors[level]
        sim_t = np.linspace(1e4,5e4,100)
        sim_y = fithelper.f_fun(p, sim_t)
        ax = axs[chan_dict[chan]]
        ax.plot(sub_peak_df.time/3600, sub_peak_df.dist_binned, 'o',color=c,ms=8)
        if success:
            ax.plot(sim_t/3600, sim_y, '-', color=c,lw=4)
        else:
            ax.plot(sim_t/3600, sim_y, '--', color=c,lw=4)
        ax.set_xlim([1e4/3600,5e4/3600])
        ax.set_ylim([-100,1.3e3])
        _ = [ax.set_title(xx) for ax, xx in zip(axs, ['YFP', 'mScarlet', 'sfCFP'])]
        _ = axs[1].set_xlabel('Time (hr)')
        _ = axs[0].set_xlabel('Diff {}'.format(diff))
        _ = axs[0].set_ylabel("Pad {}\nDistance (um)".format(pad_ind))
    fig.tight_layout()
    if diff:
        plot_fn = plot_fn_tmpl.format('diff_',pad_ind)
    else:
        plot_fn = plot_fn_tmpl.format('',pad_ind)
    fig.savefig(plot_fn)
    print(plot_fn)
    plt.close('all')
    return None

if __name__ == '__main__':
  # For now, assert that the pixel size is 2.585
  try:
    for prefix, diff in zip(['','diff_'],[False, True]):
      peak_out_fn = os.path.join(acq.super_dir, "csvs", '{}peaks_pad{}.csv').format(prefix, pad_ind)
      front_out_fn = os.path.join(acq.super_dir, "csvs", '{}frontfitter_pad{}.csv').format(prefix, pad_ind)
      parent_dir = "/central/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/pngs"
      plot_fn_tmpl = os.path.join(parent_dir, "{}thresh_fitting/frontfit_pad{:02d}.png")
      fitter = mma.FrontFitter(acq, diff=diff)
      peak_df = fitter.pad_peaks(pad_ind)
      if peak_df is None:
        peak_df = pd.DataFrame()
        fit_df = pd.DataFrame()
      else:
        peak_df['diff'] = diff
        fit_df = fitter.fit_wrapper(peak_df)
        fit_df['diff'] = diff
      if len(peak_df) > 0:
        peak_df.to_csv(peak_out_fn, index=False)
        fit_df.to_csv(front_out_fn, index=False)
        plot_fits(peak_df, fit_df)
    with open('debug.log', 'a') as f_debug:
      f_debug.write('{} fitting front propagation finished for pad {}'.format(fn, pad_ind)+'\n')
  except Exception as error:
    with open('debug.log', 'a') as f_debug:
      f_debug.write(time.asctime()+'\n')
      f_debug.write(error.__repr__()+'\n')
      f_debug.write('fitting wavefront failed for pad {}'.format(pad_ind)+'\n')
      f_debug.write(traceback.format_exc()+'\n')
      f_debug.write('{} failed'.format(fn)+'\n')
