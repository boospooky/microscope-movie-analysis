#!/home/jparkin/anaconda3/bin/python

#Submit this script with: sbatch thefilename

#SBATCH --time=0:30:00   # walltime
#SBATCH --ntasks=1   # number of processor cores (i.e. tasks)
#SBATCH --mem-per-cpu=2G   # memory per CPU core
#SBATCH -J "write_pad_gifs"   # job name
#SBATCH --mail-user=jparkin@caltech.edu   # email address
#SBATCH --mail-type=END
#SBATCH --array=0-51

# LOAD MODULES, INSERT CODE, AND RUN YOUR PROGRAMS HERE
# source ~/.bashrc
import os
import sys
import traceback
import importlib
import time
import multiprocessing
import numpy as np
import pandas as pd

os.chdir('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis')
pad_ind = os.getenv("SLURM_ARRAY_TASK_ID")
if pad_ind is None:
  pad_ind = 0
else:
  pad_ind = np.int(pad_ind)
file_ind = 64 # 200627
scale = 4
sigma = 2/scale
bg_sigma = 64/scale
print_img=True
# bg_option='pos_list'
bg_option='default'

spec = importlib.util.spec_from_file_location("module.name", "/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/mma.py")
mma = importlib.util.module_from_spec(spec)
spec.loader.exec_module(mma)

if True:
  with open('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/txt_files/unique_good_dirs_nodatadirs.txt', 'r') as f:
    lines = f.read().splitlines()
else:
  with open('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/txt_files/bad_files.txt', 'r') as f:
    lines = f.read().splitlines()

fn = os.path.abspath(lines[int(file_ind)])
acq = mma.Acquisition(fn)#, overwrite_time_df=True, overwrite_files_df=True, overwrite_cor_pos_df=True)
print(acq.super_dir)

out_dir = os.path.join(acq.super_dir, 'gifs')
if not os.path.isdir(out_dir):
  os.mkdir(out_dir)
out_tmpl = os.path.join(out_dir, 'pad{:02d}.gif')
out_fn = out_tmpl.format(pad_ind)

if __name__ == '__main__':
  # For now, assert that the pixel size is 2.585
  try:
    padhelper = mma.WriteHelper(acq, pad_ind=pad_ind, scale=scale, sigma=sigma, bg_option=bg_option, bg_sigma=bg_sigma)
    _ = padhelper.save_anim(out_fn, writer='pillow')
    with open('debug.log', 'a') as f_debug:
      f_debug.write('{} writing pad gif finished {}'.format(fn, out_fn)+'\n')
  except Exception as error:
    with open('debug.log', 'a') as f_debug:
      f_debug.write(time.asctime()+'\n')
      f_debug.write(error.__repr__()+'\n')
      f_debug.write('writing pad gif failed'+'\n')
      f_debug.write(traceback.format_exc()+'\n')
      f_debug.write('{} failed'.format(out_fn)+'\n')
else:
  with open('debug.log', 'a') as f_debug:
    f_debug.write(time.asctime()+'\n')
    f_debug.write('writing pad gif failed'+'\n')
    #f_debug.write(traceback.format_exc()+'\n')
    f_debug.write('{} failed'.format(out_fn)+'\n')
