#!/home/jparkin/anaconda3/bin/python

#Submit this script with: sbatch thefilename

#SBATCH --time=1:00:00   # walltime
#SBATCH --ntasks=1   # number of processor cores (i.e. tasks)
#SBATCH --mem-per-cpu=2G   # memory per CPU core
#SBATCH -J "write_tiff_stacks_to_scratch"   # job name
#SBATCH --mail-user=jparkin@caltech.edu   # email address
#SBATCH --mail-type=END
#SBATCH --array=0-36

# LOAD MODULES, INSERT CODE, AND RUN YOUR PROGRAMS HERE
# source ~/.bashrc
import os
import sys
import traceback
import importlib
import time
import multiprocessing
import numpy as np
import pandas as pd
import skimage.external.tifffile
import skimage.morphology

os.chdir('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis')
pad_ind = os.getenv("SLURM_ARRAY_TASK_ID")
if pad_ind is None:
  pad_ind = 0
else:
  pad_ind = np.int(pad_ind)
file_ind = 64 # 200627
scale = 1
sigma = 2
bg_sigma = 64
print_img=False
bg_option='pos_list'

spec = importlib.util.spec_from_file_location("module.name", "/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/mma.py")
mma = importlib.util.module_from_spec(spec)
spec.loader.exec_module(mma)

if True:
  with open('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/txt_files/unique_good_dirs_nodatadirs.txt', 'r') as f:
    lines = f.read().splitlines()
else:
  with open('/groups/murray-biocircuits/jparkin/movies/microscope-movie-analysis/txt_files/bad_files.txt', 'r') as f:
    lines = f.read().splitlines()

fn = os.path.abspath(lines[int(file_ind)])
acq = mma.Acquisition(fn)#, overwrite_time_df=True, overwrite_files_df=True, overwrite_cor_pos_df=True)
out_dir = os.path.join(acq.super_dir,"csvs")
if not os.path.isdir(out_dir):
  os.mkdir(out_dir)
print(acq.super_dir)

def make_mask_stack(proc):
  diff = proc.diff
  if diff:
    mask_arr = np.zeros_like(proc.diff_arr)
    frame_vec = proc.acq.frame_vec[:-1]
    arrtype = 'diff'
  else:
    mask_arr = np.zeros_like(proc.filt_arr)
    frame_vec = proc.acq.frame_vec
    arrtype = 'filt'
  # Check that csvs directory exists
  out_dir = proc.tiff_dir
  if not os.path.isdir(out_dir):
    os.mkdir(out_dir)
  prefixes = ['', 'filt_', 'diff_']
  if diff:
    prefix = prefixes[2]
  else:
    prefix = prefixes[1]
  fn_stem = '{}pad{}_masks.tif'
  tiff_fn = os.path.join(out_dir, fn_stem).format(prefix, proc.pad_ind)
  nf, nc, nh, nw = mask_arr.shape

  for frame in np.arange(nf):
    for ci in np.arange(nc):
      thresh_arr, chan_arr, thresh = proc._chan_thresh(frame, ci, arr_type=arrtype)
      mask_arr[frame, ci, :, :] = thresh_arr #skimage.morphology.label(thresh_arr)
  for ci in np.arange(nc):
    mask_arr[:,ci,:,:] = skimage.morphology.label(mask_arr[:,ci,:,:])
  keys = ['scale','bg_option','sigma','bg_sigma']
  values = proc.scale, proc.bg_option, proc.sigma, proc.bg_sigma
  metadata = dict(zip(keys, values))
  skimage.external.tifffile.imsave(tiff_fn, mask_arr, metadata=metadata, imagej=True)
  return tiff_fn

if __name__ == '__main__':
  # For now, assert that the pixel size is 2.585
  try:
    procdiff = mma.ProcessUnorderedDiff(acq, pad_ind, scale=scale, sigma=sigma,
        bg_sigma=bg_sigma, print_img=print_img, bg_option=bg_option, diff=False)
    make_mask_stack(procdiff)
    procdiff.diff = True
    tiff_fn = make_mask_stack(procdiff)
    with open('debug.log', 'a') as f_debug:
      f_debug.write('{} writing tiff stack finished {}'.format(fn, tiff_fn)+'\n')
  except Exception as error:
    with open('debug.log', 'a') as f_debug:
      f_debug.write(time.asctime()+'\n')
      f_debug.write(error.__repr__()+'\n')
      f_debug.write('writing scratch tiff stack failed'+'\n')
      f_debug.write(traceback.format_exc()+'\n')
      f_debug.write('{} failed'.format(fn)+'\n')
else:
  with open('debug.log', 'a') as f_debug:
    f_debug.write(time.asctime()+'\n')
    f_debug.write('writing scratch tiff stack failed'+'\n')
    #f_debug.write(traceback.format_exc()+'\n')
    f_debug.write('{} failed'.format(fn)+'\n')
